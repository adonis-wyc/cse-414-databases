/************ data model **************/
.symbol_type PersonType
.symbol_type DescriptionType

.decl person(name:PersonType, description:DescriptionType)
.input person(filename="DATA/person.facts")

.decl female(name:PersonType)
.input female(filename="DATA/female.facts")

.decl male(name:PersonType)
.input male(filename="DATA/male.facts")

.decl parent_child(p1:PersonType, p2:PersonType)
.input parent_child(filename="DATA/parent_child.facts")

.decl person_living(p:PersonType)
.input person_living(filename="DATA/person_living.facts")

/************* problem 0 **************/
/**** Find all children of Priscilla ****/
.decl p0(x:PersonType, d:DescriptionType)
.output p0(filename="hw4-0.ans")

// NOTE: if you want to redirect the output to console
// you can use the syntax:
.output p0(IO=stdout)
p0(x,d) :- parent_child("Priscilla",x), person(x,d).

// NOTE: DO NOT remove the declarations or the .output statements below.
// you can ignore any "No rules/facts defined for relation" warnings when you
// have not defined the rules for those relations
/************* problem 1 **************/
.decl p1(x:PersonType,d:DescriptionType)

.output p1(filename="hw4-1.ans")
.output p1(IO=stdout)

p1(x,d) :- p0(x,d).
p1(x,d) :- p1(p,_), parent_child(p,x), person(x,d).


/************* problem 2 **************/
.decl p2(x:PersonType, d:DescriptionType, m:number)
.decl women(x: PersonType, d: DescriptionType, m:number)
.decl men(x: PersonType, d: DescriptionType, m:number)
.decl unsuccessful_women(x: PersonType, d: DescriptionType, m:number)
.decl unsuccessful_men(x: PersonType, d: DescriptionType, m:number)

.output p2(filename="hw4-2.ans")
.output p2(IO=stdout)

p2(x,d,n) :- women(x,d,n), !unsuccessful_women(x,d,n).
p2(x,d,n) :- men(x,d,n), !unsuccessful_men(x,d,n).

women(x,d,n) :- female(x), person(x,d), n = count:{parent_child(x,y)}.
men(x,d,n) :- male(x), person(x,d), n = count:{parent_child(x,y)}.
unsuccessful_women(x,d,n) :- women(a,b,c), women(x,d,n), n < c.
unsuccessful_men(x,d,n) :- men(a,b,c), men(x,d,n), n < c.

/************* problem 3 **************/
.decl p3(x:PersonType, m1:number, m2:number)
.decl gen(x:PersonType, m:number)

.output p3(filename="hw4-3.ans")
.output p3(IO=stdout)

p3(x,m1,m2) :- person_living(x), m1 = min m: {gen(x,m)}, m2 = max m:{gen(x,m)}.

gen(x,m) :- !parent_child(_,x), person(x,_), m = 0.

gen(x,n+1) :- parent_child(y,x), person(x,_), gen(y,n).

/************* problem 4 **************/
.decl p4(x:PersonType)
.decl female_ancestors(x: PersonType, y: PersonType)
.decl not_MCA(x: PersonType)

.output p4(filename="hw4-4.ans")
.output p4(IO=stdout)

p4(x) :- !not_MCA(x), female_ancestors(_,x).
not_MCA(y) :- person_living(z), female_ancestors(x,y), !female_ancestors(z,y).

female_ancestors(x,y) :- person_living(x), parent_child(y,x), female(y).
female_ancestors(x,y) :- parent_child(y,z), female(y), female_ancestors(x,z).

/************* problem 5 **************/
.decl p5(x:PersonType)
.decl not_MRCA(x:PersonType)

.output p5(filename="hw4-5.ans")
.output p5(IO=stdout)

p5(x) :- p4(x), !not_MRCA(x).

not_MRCA(x) :- p4(a), p4(x), a != x, xn = max n:gen(x,n), an = max n:gen(a,n), xn < an.
not_MRCA(x) :- p4(x), p4(another), female_ancestors(another,x), another != x.
